# Definição da classe para um nó da lista duplamente encadeada
class Node:
    def __init__(self, valor):
        self.valor = valor
        self.anterior = None
        self.proximo = None

# Função para adicionar um nó na lista em ordem crescente
def adicionar_no(lista, valor):
    novo_no = Node(valor)

    if lista is None:
        lista = novo_no
    elif valor < lista.valor:
        novo_no.proximo = lista
        lista.anterior = novo_no
        lista = novo_no
    else:
        atual = lista
        while atual.proximo is not None and atual.proximo.valor < valor:
            atual = atual.proximo
        novo_no.proximo = atual.proximo
        novo_no.anterior = atual
        if atual.proximo is not None:
            atual.proximo.anterior = novo_no
        atual.proximo = novo_no

    return lista

# Função para remover um nó com valor específico da lista
def remover_no(lista, valor):
    if lista is None:
        return lista

    atual = lista
    while atual is not None and atual.valor != valor:
        atual = atual.proximo

    if atual is None:
        return lista

    if atual.anterior is not None:
        atual.anterior.proximo = atual.proximo
    else:
        lista = atual.proximo

    if atual.proximo is not None:
        atual.proximo.anterior = atual.anterior

    return lista

# Criação da lista duplamente encadeada com 10 números de 0 a 9
lista = None
for i in range(10):
    numero = i
    lista = adicionar_no(lista, numero)

# Mostra o conteúdo da lista original
print("Conteúdo da lista original:")
atual = lista
while atual is not None:
    print(atual.valor, end=" ")
    atual = atual.proximo
print()

# Remove o número 7 da lista
numero_remover = 7
lista = remover_no(lista, numero_remover)

# Mostra o conteúdo da lista após a remoção
print("Conteúdo da lista após remoção do número", numero_remover, ":")
atual = lista
while atual is not None:
    print(atual.valor, end=" ")
    atual = atual.proximo
print()
